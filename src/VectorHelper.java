import java.util.ArrayList;
import java.util.Random;
/**
 * 
 * @author AbdicheFatimaZ *** ZerroukMadjda
 * Project : Tp1 - Introduction à la génie logicielle 
 * Section : A *** Group : 3
 *
 */
public class VectorHelper {
	/**
	 * Attributs
	 */
       private  ArrayList<Integer> vect;
       private int MaxElm ;
       private int MinElm ;
       
       /**
   	    *  Constructor  of the vector  
   	    */
       
       public VectorHelper() {
    	
		super();
		vect= new ArrayList<Integer>();
		
	   }
       /**
        * Getters & Setters
        * 
        */
       

       public int getMaxElm() {
		return MaxElm;
	}


	public void setMaxElm(int maxElm) {
		MaxElm = maxElm;
	}


	public int getMinElm() {
		return MinElm;
	}


	public void setMinElm(int minElm) {
		MinElm = minElm;
	}

        /**
         * Creation of the Vector Randomly : fill the vector with random elements with random tail < 50
         *
         */
	public void CreateVectRand (){
    	Random rand=new Random();
    	int tail =1+rand.nextInt(50);
    	
       	for (int i=0;i<tail;i++){
       		vect.add(rand.nextInt(750));
       	}
       	this.MinMax();
		
       }
      
     /**
      *     
	  * Creation of the Vector : fill the vector with elements generated by an initial value with a predefined step
      * @param tail : the length of the vector
      * @param init :  the initial value ( the first element)
      * @param pas  : step between the elements
      */
	 public void CreateVect (long tail, int init,int pas){
          	for (int i=0;i<tail;i++){
          		vect.add(init+=pas);
          	}
          	this.MinMax();
         }
      
       public void ShowVect(){
    	   for (int i=0;i<this.getTail();i++){
    		   System.out.print("|"+vect.get(i)+"|");
    	   }
       }
/**
 *   Length of a vector
 * @return the length of the vector
 */
	public long getTail() {
		int cpt=0;
		for (int a:vect) {
			cpt++;
		}
		return cpt;
	}
    /**
     * Sum of 2 vectors with same length
     * @param vectr : the 2nd vector which will be added to the vector
     * @return   the result of the addition  
     */
	public VectorHelper Sommer( VectorHelper vectr )
	{ 
		VectorHelper vectSomme =new VectorHelper();
	
        try {
    	     if (vectr.getTail() != this.getTail() ) 
                {
    	            throw new TailleException () ;
    	 
                 } else  {
                	  
                	 for (int i=0;i<this.getTail();i++) {
                		 vectSomme.vect.add(vectr.vect.get(i)+vect.get(i)) ;
             		                 } 
                         }
    	 
        }
     catch (TailleException e) 
        { System.out.print("Impossible de sommer des vecteurs de différentes tailles");}
     return vectSomme ;
       
    }
	/**
	 * Inverse the vector
	 */
	public void Inverse ()
	{ 
	  int x ,i =0,j=(int) (this.getTail()-1);
		while ( i<j )
		{  x= vect.get(i);
		 vect.set(i, vect.get(j)) ;
		 vect.set(j, x) ;
		 j--;
		 i++ ;
		}
	}
	/**
	 * Initialize the max & the min of the vector
	 */
		public void MinMax ()
		{
			int  min=this.vect.get(0) , max = min ;
			 for (int i=1;i<this.getTail();i++) {
				 if (max < this.vect.get(i) ) max = this.vect.get(i) ;
				 if (min > this.vect.get(i) ) min = this.vect.get(i) ;
				 
     		                 }
			 this.MaxElm=max ;
			 this.MinElm=min ;
			
		}
		 /**
	        * 
	        * @param born : the inferior born of the extracted-Table
	        * @return  the index of the smallest element from the extracted-Table
	        */
	       public int FindSmlElt (final int born){
	    	   int min;
	   
	    	   if (born!=this.getTail()){
	    	   min =born;
	    	   for (int i=born+1;i<this.getTail();i++){
	    		 if (vect.get(i)<vect.get(min) ) min=i;
	    	   }
	    	   return min;
	    	   }
	    	   else return -1;
	    	   
	       }
	       private void Replace(int born){
	    	   
	    	   int x, swip = this.FindSmlElt(born);
	    	   if (swip!=-1){
	    		   x=vect.get(born);
	    		   vect.set(born, vect.get(swip)) ;
	    			 vect.set(swip, x) ;
	    		   
	    	   }
	       }
	       public void SortVect(){
	    	   for (int i=0;i<this.getTail();i++){
	    		   Replace(i);
	    	   }
	       }
	       
	       public int Formula1(){
	   		int sum =0;
	   		for(int i=0;i<this.getTail();i++){
	   			sum+=vect.get(i);
	   		}
	   		return sum;
	   		
	   	}
	   	
	   	public void Formula2(){
	   		
	   		for(int i=0;i<this.getTail();i++){
	   			vect.set(i,vect.get(i)*3);
	   		}
	   	
	   		
	   	}
		
	}
	
		
	

 